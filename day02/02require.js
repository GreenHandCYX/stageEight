//通过require既可以加载系统模块,也可以加载文件模块


//require本身是一个函数

//传递不同的参数。执行结果不同:

//1.当传入一个字符串不以 ./ 或 ../开头，会自动当做系统模块来加载
    //注:以往会错以为不写.，会默认当成./（即当前目录来解析），其实在nodejs中并不会自动加./
// require('01cart.js');



//2.nodejs会自动将.js和.json结尾的文件视为模块，所以在require加载模块时,可以不加后缀
require('./01cart');

let users = require('./01users');
console.log(users);



//3.require加载模块时:
//当目录中存在node_modules这样一个特殊目录时,
//在使用require时,如果没有使用./或../会优先去node_modules下查找,
//若找不到再查找父级目录中的node_modules,
//如果存在,则在父级的node_modules下查找,
//若不存在则再上一级（只指一级父目录）
//以此类推若一直未找到node_modules则视为系统模块
require('02test');




//4.也可以将模块拆分成若干小文件，将这些相关小文件放到同一目录下，将这个目录视为一整个模块

//在加载模块时，nodejs可以省略后缀就会导致歧义产生
//例如 ./cart既可以理解为 ./cart 这个目录 也可以理解为 ./cart.js

//遇到这样情况时,nodejs会优先当成目录去对待再去查找目录中有没有index.js
//没有index.js则表明当成目录加载失败，再尝试当作文件加载

require('./02cart');


//5.
//通常将模块形象地称为包
//当将多个文件放到同一目录下时。需要对此模块进行说明称为包描述文件
//并且这个文件的名字固定的为package.json
//在这个描述文件中可以写任意内容，只要符合json语法
//但有几项是必须的如版本号，模块名，作者

//通常这个文件可以手动创建，但一般通过npm创建
//当用命令行创建时，需要在包的 根目录下 通过 npm init 创建


 //当包中不办含index.js时
  //会使用package.json中main指定的入口